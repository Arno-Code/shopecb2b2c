<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.shopec.dao.SkuDao">

    <!-- 开启二级缓存 -->
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="net.shopec.entity.Sku">
    	<result column="id" property="id" />
    	<result column="version" property="version" />
        <result column="created_date" property="createdDate" />
        <result column="last_modified_date" property="lastModifiedDate" />
        <result column="allocated_stock" property="allocatedStock" />
        <result column="cost" property="cost" />
        <result column="exchange_point" property="exchangePoint" />
        <result column="is_default" property="isDefault" />
        <result column="market_price" property="marketPrice" />
        <result column="price" property="price" />
        <result column="reward_point" property="rewardPoint" />
        <result column="sn" property="sn" />
        <result column="specification_values" property="specificationValues" jdbcType="LONGVARCHAR"
				javaType="java.util.ArrayList" typeHandler="net.shopec.handlers.SpecificationHandler" />
        <result column="stock" property="stock" />
        <association property="product" select="net.shopec.dao.ProductDao.find" column="product_id" javaType="net.shopec.entity.Product" fetchType="lazy"/>
        <collection property="cartItems" select="net.shopec.dao.CartItemDao.findSet" column="{attributeName=sku_id, attributeValue=id}" ofType="net.shopec.entity.CartItem" fetchType="lazy"/>
        <collection property="orderItems" select="net.shopec.dao.OrderItemDao.findSet" column="{attributeName=sku_id, attributeValue=id}" ofType="net.shopec.entity.OrderItem" fetchType="lazy"/>
        <collection property="orderShippingItems" select="net.shopec.dao.OrderShippingItemDao.findSet" column="{attributeName=sku_id, attributeValue=id}" ofType="net.shopec.entity.OrderShippingItem" fetchType="lazy"/>
        <collection property="productNotifies" select="net.shopec.dao.ProductNotifyDao.findSet" column="{attributeName=sku_id, attributeValue=id}" ofType="net.shopec.entity.ProductNotify" fetchType="lazy"/>
        <collection property="stockLogs" select="net.shopec.dao.StockLogDao.findSet" column="{attributeName=sku_id, attributeValue=id}" ofType="net.shopec.entity.StockLog" fetchType="lazy"/>
        <collection property="giftPromotions" select="net.shopec.dao.PromotionDao.findSet" column="{attributeName=sku_id, attributeValue=id}" ofType="net.shopec.entity.StockLog" fetchType="lazy"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
    	sku.id, sku.version, sku.created_date, sku.last_modified_date, sku.allocated_stock, sku.cost, sku.exchange_point, sku.is_default, sku.market_price, sku.price, sku.reward_point, sku.sn, sku.specification_values, sku.stock, sku.product_id, 'sku_id'
    </sql>
	
	<!-- 查找实体对象 -->
	<select id="find" parameterType="java.lang.Long" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`sku` sku
		WHERE
			sku.`id` = #{id}
	</select>
	
	<!-- 查找实体对象集合 -->
	<select id="findSet" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`sku` sku
		<if test="attributeName == 'promotion_id'">
			LEFT JOIN `promotion_sku` ON id = gifts_id
			WHERE
				gift_promotions_id = #{attributeValue}
		</if>
		<if test="attributeName != 'promotion_id'">
			WHERE
				${attributeName} = #{attributeValue}
		</if>
	</select>
	
	<!-- 根据属性查找实体对象 -->
	<select id="findByAttribute" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`sku` sku
		WHERE
			${attributeName } = #{attributeValue}
	</select>
	
	<!-- 通过编号、名称查找SKU -->
	<select id="search" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`sku` sku
		LEFT JOIN `product` product ON sku.product_id = product.id
		<where>
			<if test="type != null">
				AND product.type = #{type.ordinal}
			</if>
			AND (sku.sn LIKE CONCAT('%', #{keyword}, '%') OR product.name LIKE CONCAT('%', #{keyword}, '%'))
			<if test="excludes != null and excludes.size > 0 ">
				AND sku.id NOT IN
				<foreach collection="excludes" item="exclude" open="(" separator="," close=")" >
		        	#{exclude.id}
		        </foreach>
			</if>
			<if test="count != null">
				LIMIT 0, ${count}
			</if>
		</where>
	</select>
	
	<!-- 判断是否存在 -->
	<select id="exists" resultType="boolean">
		SELECT
			COUNT(1)
		FROM
			`sku`
		WHERE
			${attributeName} = #{attributeValue}
	</select>
	
	<!-- 删除 -->
  	<update id="remove" parameterType="net.shopec.entity.Sku">
  		DELETE FROM `sku` WHERE `id` = #{entity.id};
  	</update>
  	
	<!-- 保存 -->
	<insert id="save" parameterType="net.shopec.entity.Sku">
    	INSERT INTO sku (
			id ,
			created_date ,
			version ,
			allocated_stock ,
			cost ,
			exchange_point ,
			is_default ,
			market_price ,
			price ,
			reward_point ,
			sn ,
			stock ,
			product_id ,
			specification_values
		)
		VALUES (
			#{entity.id}, 
			NOW(), 
			0, 
			#{entity.allocatedStock}, 
			#{entity.cost}, 
			#{entity.exchangePoint}, 
			#{entity.isDefault}, 
			#{entity.marketPrice}, 
			#{entity.price}, 
			#{entity.rewardPoint}, 
			#{entity.sn}, 
			#{entity.stock}, 
			#{entity.product.id}, 
			#{entity.specificationValues, typeHandler=net.shopec.handlers.SpecificationHandler}
		)
  	</insert>

	<update id="update" parameterType="net.shopec.entity.Sku">
   		UPDATE sku
		SET last_modified_date = #{entity.lastModifiedDate},
			version = #{entity.version} + 1,
			allocated_stock = #{entity.allocatedStock},
			cost = #{entity.cost},
			exchange_point = #{entity.exchangePoint},
			is_default = #{entity.isDefault},
			market_price = #{entity.marketPrice},
			price = #{entity.price},
			reward_point = #{entity.rewardPoint},
			stock = #{entity.stock}
		WHERE
			id = #{entity.id}
		AND version = #{entity.version}
  	</update>
  
</mapper>
