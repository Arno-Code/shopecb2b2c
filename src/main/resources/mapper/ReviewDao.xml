<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.shopec.dao.ReviewDao">

    <!-- 开启二级缓存 -->
    <cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="net.shopec.entity.Review">
	    <result column="id" property="id" />
	    <result column="version" property="version" />
        <result column="created_date" property="createdDate" />
        <result column="last_modified_date" property="lastModifiedDate" />
        <result column="content" property="content" />
        <result column="ip" property="ip" />
        <result column="is_show" property="isShow" />
        <result column="score" property="score" />
        <association property="member" select="net.shopec.dao.MemberDao.find" column="member_id" javaType="net.shopec.entity.Member" fetchType="lazy"/>
        <association property="product" select="net.shopec.dao.ProductDao.find" column="product_id" javaType="net.shopec.entity.Product" fetchType="lazy"/>
        <association property="store" select="net.shopec.dao.StoreDao.find" column="store_id" javaType="net.shopec.entity.Store" fetchType="lazy"/>
        <association property="forReview" select="find" column="for_review_id"  javaType="net.shopec.entity.Review" fetchType="lazy"/>
        <collection property="replyReviews" select="findSet" column="{attributeName=forReviewId, attributeValue=id}" ofType="net.shopec.entity.Review" fetchType="lazy"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
    	 id, version, created_date, last_modified_date, content, ip, is_show, score, for_review_id, member_id, product_id, store_id, 'forReviewId'
    </sql>

	<!-- 查找实体对象 -->
	<select id="find" parameterType="Long" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			review 
		WHERE id = #{id}
	</select>
	
	<!-- 查找实体对象集合 -->
	<select id="findSet" resultType="net.shopec.entity.Review">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			`review`
		<where>
			<if test="attributeName == 'forReviewId'">
				AND for_review_id = #{attributeValue}
				ORDER BY created_date ASC
			</if>
			<if test="attributeName != 'forReviewId'">
				AND ${attributeName} = #{attributeValue}
			</if>
		</where>
	</select>
	
	<!-- 查找评论 -->
	<select id="findList" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			review
		<where>
		  <if test="member != null">
		  	AND member_id = #{member.id}
		  </if>
		  <if test="product != null">
		  	AND product_id = #{product.id}
		  </if>
		  <if test="isShow">
		  	AND is_show = #{isShow}
		  </if>
		   <if test="type != null">
		  	<choose>
		  		<when test="type.name == 'positive'">
		  			AND score <![CDATA[ >= ]]> 4
		  		</when>
		  		<when test="type.name == 'moderate'">
		  			AND score <![CDATA[ = ]]> 3
		  		</when>
		  		<when test="type.name == 'negative'">
		  			AND score <![CDATA[ <= ]]> 2
		  		</when>
		  	</choose>
		  </if>
		</where>
	</select>
	
	<!-- 查找评论分页 -->
	<select id="findPage" resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List"></include>
		FROM
			review
		<where>
		  ${ew.sqlSegment}
		  <if test="member != null">
		  	AND member_id = #{member.id}
		  </if>
		  <if test="product != null">
		  	AND product_id = #{product.id}
		  </if>
		  <if test="isShow">
		  	AND is_show = #{isShow}
		  </if>
		  <if test="store">
		  	AND store_id = #{store.id}
		  </if>
		  <if test="type != null">
		  	<choose>
		  		<when test="type.name == 'positive'">
		  			AND score <![CDATA[ >= ]]> 4
		  		</when>
		  		<when test="type.name == 'moderate'">
		  			AND score <![CDATA[ = ]]> 3
		  		</when>
		  		<when test="type.name == 'negative'">
		  			AND score <![CDATA[ <= ]]> 2
		  		</when>
		  	</choose>
		  </if>
		  AND for_review_id IS NULL
		</where>
	</select>
	
	<!-- 查找商品收藏数量 -->
	<select id="count" resultType="long">
		SELECT
			count(*)
		FROM
			`review`
		<where>
			<if test="member != null">
				AND member_id = #{member.id}
			</if>
			<if test="product != null">
			  	AND product_id = #{product.id}
			</if>
			<if test="isShow">
			  	AND is_show = #{isShow}
			</if>
			<if test="type != null">
			  	<choose>
			  		<when test="type.name == 'positive'">
			  			AND score <![CDATA[ >= ]]> 4
			  		</when>
			  		<when test="type.name == 'moderate'">
			  			AND score <![CDATA[ = ]]> 3
			  		</when>
			  		<when test="type.name == 'negative'">
			  			AND score <![CDATA[ <= ]]> 2
			  		</when>
			  	</choose>
			</if>
		</where>
	</select>
	
	<!-- 计算商品总评分 -->
	<select id="calculateTotalScore" resultType="long">
		SELECT
			IFNULL(sum(score),0)
		FROM
			review
		WHERE
			product_id = #{product.id}
		AND is_show = true
		AND for_review_id IS NULL
	</select>
	
	<!-- 计算商品评分次数 -->
	<select id="calculateScoreCount" resultType="long">
		SELECT
			IFNULL(count(*),0)
		FROM
			review
		WHERE
			product_id = #{product.id}
		AND is_show = true
		AND for_review_id IS NULL
	</select>
	
	<!-- 保存 -->
	<insert id="save" parameterType="net.shopec.entity.Review">
    	INSERT INTO review (
			id ,
			created_date ,
			version ,
			content ,
			ip ,
			is_show ,
			score ,
			for_review_id ,
			member_id ,
			product_id ,
			store_id
		)
		VALUES (
			#{entity.id}, 
			#{entity.createdDate},
			#{entity.version}, 
			#{entity.content}, 
			#{entity.ip}, 
			#{entity.isShow}, 
			#{entity.score}, 
			#{entity.forReview.id}, 
			#{entity.member.id}, 
			#{entity.product.id}, 
			#{entity.store.id}
		)
  	</insert>
  	
  	<!-- 更新 -->
  	<update id="update" parameterType="net.shopec.entity.Review">
   		UPDATE review
		SET last_modified_date = #{entity.lastModifiedDate},
			version = #{entity.version} + 1,
			content = #{entity.content},
			ip = #{entity.ip},
			is_show = #{entity.isShow},
			score = #{entity.score},
			for_review_id = #{entity.forReview.id},
			member_id = #{entity.member.id},
			product_id = #{entity.product.id},
			store_id = #{entity.store.id}
		WHERE
			id = #{entity.id}
		AND version = #{entity.version}
  	</update>
  	
</mapper>
